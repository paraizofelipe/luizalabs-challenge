// Code generated by MockGen. DO NOT EDIT.
// Source: ./buyer/repository/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/paraizofelipe/luizalabs-challenge/buyer/domain"
	domain0 "github.com/paraizofelipe/luizalabs-challenge/product/domain"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockReader) FindAll() ([]domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockReaderMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockReader)(nil).FindAll))
}

// FindByEmail mocks base method.
func (m *MockReader) FindByEmail(email string) (domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockReaderMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockReader)(nil).FindByEmail), email)
}

// FindByID mocks base method.
func (m *MockReader) FindByID(id string) (domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockReaderMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReader)(nil).FindByID), id)
}

// FindFavoriteProduct mocks base method.
func (m *MockReader) FindFavoriteProduct(buyerID string) ([]domain0.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoriteProduct", buyerID)
	ret0, _ := ret[0].([]domain0.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoriteProduct indicates an expected call of FindFavoriteProduct.
func (mr *MockReaderMockRecorder) FindFavoriteProduct(buyerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoriteProduct", reflect.TypeOf((*MockReader)(nil).FindFavoriteProduct), buyerID)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockWriter) Add(arg0 domain.Buyer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockWriterMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWriter)(nil).Add), arg0)
}

// AddFavoriteProduct mocks base method.
func (m *MockWriter) AddFavoriteProduct(buyerID, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavoriteProduct", buyerID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavoriteProduct indicates an expected call of AddFavoriteProduct.
func (mr *MockWriterMockRecorder) AddFavoriteProduct(buyerID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavoriteProduct", reflect.TypeOf((*MockWriter)(nil).AddFavoriteProduct), buyerID, productID)
}

// RemoveByID mocks base method.
func (m *MockWriter) RemoveByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByID indicates an expected call of RemoveByID.
func (mr *MockWriterMockRecorder) RemoveByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByID", reflect.TypeOf((*MockWriter)(nil).RemoveByID), id)
}

// Update mocks base method.
func (m *MockWriter) Update(arg0 domain.Buyer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWriterMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWriter)(nil).Update), arg0)
}

// MockBuyerRepository is a mock of BuyerRepository interface.
type MockBuyerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBuyerRepositoryMockRecorder
}

// MockBuyerRepositoryMockRecorder is the mock recorder for MockBuyerRepository.
type MockBuyerRepositoryMockRecorder struct {
	mock *MockBuyerRepository
}

// NewMockBuyerRepository creates a new mock instance.
func NewMockBuyerRepository(ctrl *gomock.Controller) *MockBuyerRepository {
	mock := &MockBuyerRepository{ctrl: ctrl}
	mock.recorder = &MockBuyerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuyerRepository) EXPECT() *MockBuyerRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBuyerRepository) Add(arg0 domain.Buyer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBuyerRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBuyerRepository)(nil).Add), arg0)
}

// AddFavoriteProduct mocks base method.
func (m *MockBuyerRepository) AddFavoriteProduct(buyerID, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavoriteProduct", buyerID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFavoriteProduct indicates an expected call of AddFavoriteProduct.
func (mr *MockBuyerRepositoryMockRecorder) AddFavoriteProduct(buyerID, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavoriteProduct", reflect.TypeOf((*MockBuyerRepository)(nil).AddFavoriteProduct), buyerID, productID)
}

// FindAll mocks base method.
func (m *MockBuyerRepository) FindAll() ([]domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBuyerRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBuyerRepository)(nil).FindAll))
}

// FindByEmail mocks base method.
func (m *MockBuyerRepository) FindByEmail(email string) (domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockBuyerRepositoryMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockBuyerRepository)(nil).FindByEmail), email)
}

// FindByID mocks base method.
func (m *MockBuyerRepository) FindByID(id string) (domain.Buyer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(domain.Buyer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockBuyerRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockBuyerRepository)(nil).FindByID), id)
}

// FindFavoriteProduct mocks base method.
func (m *MockBuyerRepository) FindFavoriteProduct(buyerID string) ([]domain0.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFavoriteProduct", buyerID)
	ret0, _ := ret[0].([]domain0.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFavoriteProduct indicates an expected call of FindFavoriteProduct.
func (mr *MockBuyerRepositoryMockRecorder) FindFavoriteProduct(buyerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFavoriteProduct", reflect.TypeOf((*MockBuyerRepository)(nil).FindFavoriteProduct), buyerID)
}

// RemoveByID mocks base method.
func (m *MockBuyerRepository) RemoveByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByID indicates an expected call of RemoveByID.
func (mr *MockBuyerRepositoryMockRecorder) RemoveByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByID", reflect.TypeOf((*MockBuyerRepository)(nil).RemoveByID), id)
}

// Update mocks base method.
func (m *MockBuyerRepository) Update(arg0 domain.Buyer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBuyerRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBuyerRepository)(nil).Update), arg0)
}
